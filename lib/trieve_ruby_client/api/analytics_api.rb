=begin
#Trieve API

#Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.

The version of the OpenAPI document: 0.11.0
Contact: developers@trieve.ai
Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'cgi'

module TrieveRubyClient
  class AnalyticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Cluster Analytics
    # This route allows you to view the cluster analytics for a dataset.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param cluster_analytics [ClusterAnalytics] JSON request payload to filter the graph
    # @param [Hash] opts the optional parameters
    # @return [ClusterAnalyticsResponse]
    def get_cluster_analytics(tr_dataset, cluster_analytics, opts = {})
      data, _status_code, _headers = get_cluster_analytics_with_http_info(tr_dataset, cluster_analytics, opts)
      data
    end

    # Get Cluster Analytics
    # This route allows you to view the cluster analytics for a dataset.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param cluster_analytics [ClusterAnalytics] JSON request payload to filter the graph
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterAnalyticsResponse, Integer, Hash)>] ClusterAnalyticsResponse data, response status code and response headers
    def get_cluster_analytics_with_http_info(tr_dataset, cluster_analytics, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_cluster_analytics ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling AnalyticsApi.get_cluster_analytics"
      end
      # verify the required parameter 'cluster_analytics' is set
      if @api_client.config.client_side_validation && cluster_analytics.nil?
        fail ArgumentError, "Missing the required parameter 'cluster_analytics' when calling AnalyticsApi.get_cluster_analytics"
      end
      # resource path
      local_var_path = '/api/analytics/search/cluster'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(cluster_analytics)

      # return_type
      return_type = opts[:debug_return_type] || 'ClusterAnalyticsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_cluster_analytics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_cluster_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get RAG Analytics
    # This route allows you to view the RAG analytics for a dataset.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param rag_analytics [RAGAnalytics] JSON request payload to filter the graph
    # @param [Hash] opts the optional parameters
    # @return [RAGAnalyticsResponse]
    def get_rag_analytics(tr_dataset, rag_analytics, opts = {})
      data, _status_code, _headers = get_rag_analytics_with_http_info(tr_dataset, rag_analytics, opts)
      data
    end

    # Get RAG Analytics
    # This route allows you to view the RAG analytics for a dataset.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param rag_analytics [RAGAnalytics] JSON request payload to filter the graph
    # @param [Hash] opts the optional parameters
    # @return [Array<(RAGAnalyticsResponse, Integer, Hash)>] RAGAnalyticsResponse data, response status code and response headers
    def get_rag_analytics_with_http_info(tr_dataset, rag_analytics, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_rag_analytics ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling AnalyticsApi.get_rag_analytics"
      end
      # verify the required parameter 'rag_analytics' is set
      if @api_client.config.client_side_validation && rag_analytics.nil?
        fail ArgumentError, "Missing the required parameter 'rag_analytics' when calling AnalyticsApi.get_rag_analytics"
      end
      # resource path
      local_var_path = '/api/analytics/rag'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rag_analytics)

      # return_type
      return_type = opts[:debug_return_type] || 'RAGAnalyticsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_rag_analytics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_rag_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recommendation Analytics
    # This route allows you to view the recommendation analytics for a dataset.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param recommendation_analytics [RecommendationAnalytics] JSON request payload to filter the graph
    # @param [Hash] opts the optional parameters
    # @return [RecommendationAnalyticsResponse]
    def get_recommendation_analytics(tr_dataset, recommendation_analytics, opts = {})
      data, _status_code, _headers = get_recommendation_analytics_with_http_info(tr_dataset, recommendation_analytics, opts)
      data
    end

    # Get Recommendation Analytics
    # This route allows you to view the recommendation analytics for a dataset.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param recommendation_analytics [RecommendationAnalytics] JSON request payload to filter the graph
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecommendationAnalyticsResponse, Integer, Hash)>] RecommendationAnalyticsResponse data, response status code and response headers
    def get_recommendation_analytics_with_http_info(tr_dataset, recommendation_analytics, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_recommendation_analytics ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling AnalyticsApi.get_recommendation_analytics"
      end
      # verify the required parameter 'recommendation_analytics' is set
      if @api_client.config.client_side_validation && recommendation_analytics.nil?
        fail ArgumentError, "Missing the required parameter 'recommendation_analytics' when calling AnalyticsApi.get_recommendation_analytics"
      end
      # resource path
      local_var_path = '/api/analytics/recommendation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(recommendation_analytics)

      # return_type
      return_type = opts[:debug_return_type] || 'RecommendationAnalyticsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_recommendation_analytics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_recommendation_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Search Analytics
    # This route allows you to view the search analytics for a dataset.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param search_analytics [SearchAnalytics] JSON request payload to filter the graph
    # @param [Hash] opts the optional parameters
    # @return [SearchAnalyticsResponse]
    def get_search_analytics(tr_dataset, search_analytics, opts = {})
      data, _status_code, _headers = get_search_analytics_with_http_info(tr_dataset, search_analytics, opts)
      data
    end

    # Get Search Analytics
    # This route allows you to view the search analytics for a dataset.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param search_analytics [SearchAnalytics] JSON request payload to filter the graph
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchAnalyticsResponse, Integer, Hash)>] SearchAnalyticsResponse data, response status code and response headers
    def get_search_analytics_with_http_info(tr_dataset, search_analytics, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_search_analytics ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling AnalyticsApi.get_search_analytics"
      end
      # verify the required parameter 'search_analytics' is set
      if @api_client.config.client_side_validation && search_analytics.nil?
        fail ArgumentError, "Missing the required parameter 'search_analytics' when calling AnalyticsApi.get_search_analytics"
      end
      # resource path
      local_var_path = '/api/analytics/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(search_analytics)

      # return_type
      return_type = opts[:debug_return_type] || 'SearchAnalyticsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_search_analytics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_search_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
