=begin
#Trieve API

#Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.

The version of the OpenAPI document: 0.5.0
Contact: developers@trieve.ai
Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'cgi'

module TrieveRubyClient
  class ChunkGroupApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Chunk to Group
    # Add Chunk to Group  Route to add a chunk to a group.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param group_id [String] Id of the group to add the chunk to as a bookmark
    # @param add_chunk_to_group_data [AddChunkToGroupData] JSON request payload to add a chunk to a group (bookmark it)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_chunk_to_group(tr_dataset, group_id, add_chunk_to_group_data, opts = {})
      add_chunk_to_group_with_http_info(tr_dataset, group_id, add_chunk_to_group_data, opts)
      nil
    end

    # Add Chunk to Group
    # Add Chunk to Group  Route to add a chunk to a group.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param group_id [String] Id of the group to add the chunk to as a bookmark
    # @param add_chunk_to_group_data [AddChunkToGroupData] JSON request payload to add a chunk to a group (bookmark it)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_chunk_to_group_with_http_info(tr_dataset, group_id, add_chunk_to_group_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.add_chunk_to_group ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.add_chunk_to_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ChunkGroupApi.add_chunk_to_group"
      end
      # verify the required parameter 'add_chunk_to_group_data' is set
      if @api_client.config.client_side_validation && add_chunk_to_group_data.nil?
        fail ArgumentError, "Missing the required parameter 'add_chunk_to_group_data' when calling ChunkGroupApi.add_chunk_to_group"
      end
      # resource path
      local_var_path = '/api/chunk_group/chunk/{group_id}'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_chunk_to_group_data)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.add_chunk_to_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#add_chunk_to_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Chunk to Group by Tracking ID
    # Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param tracking_id [String] Id of the group to add the chunk to as a bookmark
    # @param add_chunk_to_group_data [AddChunkToGroupData] JSON request payload to add a chunk to a group (bookmark it)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_chunk_to_group_by_tracking_id(tr_dataset, tracking_id, add_chunk_to_group_data, opts = {})
      add_chunk_to_group_by_tracking_id_with_http_info(tr_dataset, tracking_id, add_chunk_to_group_data, opts)
      nil
    end

    # Add Chunk to Group by Tracking ID
    # Add Chunk to Group by Tracking ID  Route to add a chunk to a group by tracking id.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param tracking_id [String] Id of the group to add the chunk to as a bookmark
    # @param add_chunk_to_group_data [AddChunkToGroupData] JSON request payload to add a chunk to a group (bookmark it)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_chunk_to_group_by_tracking_id_with_http_info(tr_dataset, tracking_id, add_chunk_to_group_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.add_chunk_to_group_by_tracking_id ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.add_chunk_to_group_by_tracking_id"
      end
      # verify the required parameter 'tracking_id' is set
      if @api_client.config.client_side_validation && tracking_id.nil?
        fail ArgumentError, "Missing the required parameter 'tracking_id' when calling ChunkGroupApi.add_chunk_to_group_by_tracking_id"
      end
      # verify the required parameter 'add_chunk_to_group_data' is set
      if @api_client.config.client_side_validation && add_chunk_to_group_data.nil?
        fail ArgumentError, "Missing the required parameter 'add_chunk_to_group_data' when calling ChunkGroupApi.add_chunk_to_group_by_tracking_id"
      end
      # resource path
      local_var_path = '/api/chunk_group/tracking_id/{tracking_id}'.sub('{' + 'tracking_id' + '}', CGI.escape(tracking_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_chunk_to_group_data)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.add_chunk_to_group_by_tracking_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#add_chunk_to_group_by_tracking_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Chunk Group
    # Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param create_chunk_group_data [CreateChunkGroupData] JSON request payload to cretea a chunkGroup
    # @param [Hash] opts the optional parameters
    # @return [ChunkGroup]
    def create_chunk_group(tr_dataset, create_chunk_group_data, opts = {})
      data, _status_code, _headers = create_chunk_group_with_http_info(tr_dataset, create_chunk_group_data, opts)
      data
    end

    # Create Chunk Group
    # Create Chunk Group  Create a new chunk_group. This is a way to group chunks together. If you try to create a chunk_group with the same tracking_id as an existing chunk_group, this operation will fail.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param create_chunk_group_data [CreateChunkGroupData] JSON request payload to cretea a chunkGroup
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChunkGroup, Integer, Hash)>] ChunkGroup data, response status code and response headers
    def create_chunk_group_with_http_info(tr_dataset, create_chunk_group_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.create_chunk_group ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.create_chunk_group"
      end
      # verify the required parameter 'create_chunk_group_data' is set
      if @api_client.config.client_side_validation && create_chunk_group_data.nil?
        fail ArgumentError, "Missing the required parameter 'create_chunk_group_data' when calling ChunkGroupApi.create_chunk_group"
      end
      # resource path
      local_var_path = '/api/chunk_group'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_chunk_group_data)

      # return_type
      return_type = opts[:debug_return_type] || 'ChunkGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.create_chunk_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#create_chunk_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Group
    # Delete Group  This will delete a chunk_group. This will not delete the chunks that are in the group. We will soon support deleting a chunk_group along with its member chunks.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param group_id [String] Id of the group you want to fetch.
    # @param delete_chunks [Boolean] Delete the chunks within the group
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_chunk_group(tr_dataset, group_id, delete_chunks, opts = {})
      delete_chunk_group_with_http_info(tr_dataset, group_id, delete_chunks, opts)
      nil
    end

    # Delete Group
    # Delete Group  This will delete a chunk_group. This will not delete the chunks that are in the group. We will soon support deleting a chunk_group along with its member chunks.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param group_id [String] Id of the group you want to fetch.
    # @param delete_chunks [Boolean] Delete the chunks within the group
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_chunk_group_with_http_info(tr_dataset, group_id, delete_chunks, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.delete_chunk_group ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.delete_chunk_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ChunkGroupApi.delete_chunk_group"
      end
      # verify the required parameter 'delete_chunks' is set
      if @api_client.config.client_side_validation && delete_chunks.nil?
        fail ArgumentError, "Missing the required parameter 'delete_chunks' when calling ChunkGroupApi.delete_chunk_group"
      end
      # resource path
      local_var_path = '/api/chunk_group/{group_id}'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'delete_chunks'] = delete_chunks

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.delete_chunk_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#delete_chunk_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Group by Tracking ID
    # Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param tracking_id [String] Tracking id of the chunk_group to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_by_tracking_id(tr_dataset, tracking_id, opts = {})
      delete_group_by_tracking_id_with_http_info(tr_dataset, tracking_id, opts)
      nil
    end

    # Delete Group by Tracking ID
    # Delete Group by Tracking ID  Delete a chunk_group with the given tracking id.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param tracking_id [String] Tracking id of the chunk_group to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_group_by_tracking_id_with_http_info(tr_dataset, tracking_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.delete_group_by_tracking_id ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.delete_group_by_tracking_id"
      end
      # verify the required parameter 'tracking_id' is set
      if @api_client.config.client_side_validation && tracking_id.nil?
        fail ArgumentError, "Missing the required parameter 'tracking_id' when calling ChunkGroupApi.delete_group_by_tracking_id"
      end
      # resource path
      local_var_path = '/api/chunk_group/tracking_id/{tracking_id}'.sub('{' + 'tracking_id' + '}', CGI.escape(tracking_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.delete_group_by_tracking_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#delete_group_by_tracking_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Group
    # Get Group  Fetch the group with the given id. get_group
    # @param tr_dataset [String] The dataset id to use for the request
    # @param group_id [String] Id of the group you want to fetch.
    # @param [Hash] opts the optional parameters
    # @return [ChunkGroup]
    def get_chunk_group(tr_dataset, group_id, opts = {})
      data, _status_code, _headers = get_chunk_group_with_http_info(tr_dataset, group_id, opts)
      data
    end

    # Get Group
    # Get Group  Fetch the group with the given id. get_group
    # @param tr_dataset [String] The dataset id to use for the request
    # @param group_id [String] Id of the group you want to fetch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChunkGroup, Integer, Hash)>] ChunkGroup data, response status code and response headers
    def get_chunk_group_with_http_info(tr_dataset, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.get_chunk_group ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.get_chunk_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ChunkGroupApi.get_chunk_group"
      end
      # resource path
      local_var_path = '/api/chunk_group/{group_id}'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChunkGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.get_chunk_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#get_chunk_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Chunks in Group
    # Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param group_id [String] Id of the group you want to fetch.
    # @param page [Integer] The page of chunks to get from the group
    # @param [Hash] opts the optional parameters
    # @return [BookmarkData]
    def get_chunks_in_group(tr_dataset, group_id, page, opts = {})
      data, _status_code, _headers = get_chunks_in_group_with_http_info(tr_dataset, group_id, page, opts)
      data
    end

    # Get Chunks in Group
    # Get Chunks in Group  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param group_id [String] Id of the group you want to fetch.
    # @param page [Integer] The page of chunks to get from the group
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookmarkData, Integer, Hash)>] BookmarkData data, response status code and response headers
    def get_chunks_in_group_with_http_info(tr_dataset, group_id, page, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.get_chunks_in_group ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.get_chunks_in_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ChunkGroupApi.get_chunks_in_group"
      end
      if @api_client.config.client_side_validation && page < 0
        fail ArgumentError, 'invalid value for "page" when calling ChunkGroupApi.get_chunks_in_group, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/api/chunk_group/{group_id}/{page}'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s)).sub('{' + 'page' + '}', CGI.escape(page.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BookmarkData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.get_chunks_in_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#get_chunks_in_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Chunks in Group by Tracking ID
    # Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param group_tracking_id [String] The id of the group to get the chunks from
    # @param page [Integer] The page of chunks to get from the group
    # @param [Hash] opts the optional parameters
    # @return [BookmarkData]
    def get_chunks_in_group_by_tracking_id(tr_dataset, group_tracking_id, page, opts = {})
      data, _status_code, _headers = get_chunks_in_group_by_tracking_id_with_http_info(tr_dataset, group_tracking_id, page, opts)
      data
    end

    # Get Chunks in Group by Tracking ID
    # Get Chunks in Group by Tracking ID  Route to get all chunks for a group. The response is paginated, with each page containing 10 chunks. Support for custom page size is coming soon.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param group_tracking_id [String] The id of the group to get the chunks from
    # @param page [Integer] The page of chunks to get from the group
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookmarkData, Integer, Hash)>] BookmarkData data, response status code and response headers
    def get_chunks_in_group_by_tracking_id_with_http_info(tr_dataset, group_tracking_id, page, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.get_chunks_in_group_by_tracking_id ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.get_chunks_in_group_by_tracking_id"
      end
      # verify the required parameter 'group_tracking_id' is set
      if @api_client.config.client_side_validation && group_tracking_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_tracking_id' when calling ChunkGroupApi.get_chunks_in_group_by_tracking_id"
      end
      # verify the required parameter 'page' is set
      if @api_client.config.client_side_validation && page.nil?
        fail ArgumentError, "Missing the required parameter 'page' when calling ChunkGroupApi.get_chunks_in_group_by_tracking_id"
      end
      if @api_client.config.client_side_validation && page < 0
        fail ArgumentError, 'invalid value for "page" when calling ChunkGroupApi.get_chunks_in_group_by_tracking_id, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/api/chunk_group/tracking_id/{group_tracking_id}/{page}'.sub('{' + 'group_tracking_id' + '}', CGI.escape(group_tracking_id.to_s)).sub('{' + 'page' + '}', CGI.escape(page.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BookmarkData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.get_chunks_in_group_by_tracking_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#get_chunks_in_group_by_tracking_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Group by Tracking ID
    # Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
    # @param tr_dataset [String] The dataset id to use for the request
    # @param tracking_id [String] The tracking id of the group to fetch.
    # @param [Hash] opts the optional parameters
    # @return [ChunkGroup]
    def get_group_by_tracking_id(tr_dataset, tracking_id, opts = {})
      data, _status_code, _headers = get_group_by_tracking_id_with_http_info(tr_dataset, tracking_id, opts)
      data
    end

    # Get Group by Tracking ID
    # Get Group by Tracking ID  Fetch the group with the given tracking id. get_group_by_tracking_id
    # @param tr_dataset [String] The dataset id to use for the request
    # @param tracking_id [String] The tracking id of the group to fetch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChunkGroup, Integer, Hash)>] ChunkGroup data, response status code and response headers
    def get_group_by_tracking_id_with_http_info(tr_dataset, tracking_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.get_group_by_tracking_id ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.get_group_by_tracking_id"
      end
      # verify the required parameter 'tracking_id' is set
      if @api_client.config.client_side_validation && tracking_id.nil?
        fail ArgumentError, "Missing the required parameter 'tracking_id' when calling ChunkGroupApi.get_group_by_tracking_id"
      end
      # resource path
      local_var_path = '/api/chunk_group/tracking_id/{tracking_id}'.sub('{' + 'tracking_id' + '}', CGI.escape(tracking_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChunkGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.get_group_by_tracking_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#get_group_by_tracking_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Groups for Chunks
    # Get Groups for Chunks  Route to get the groups that a chunk is in.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param get_groups_for_chunks_data [GetGroupsForChunksData] JSON request payload to get the groups that a chunk is in
    # @param [Hash] opts the optional parameters
    # @return [Array<BookmarkGroupResult>]
    def get_groups_chunk_is_in(tr_dataset, get_groups_for_chunks_data, opts = {})
      data, _status_code, _headers = get_groups_chunk_is_in_with_http_info(tr_dataset, get_groups_for_chunks_data, opts)
      data
    end

    # Get Groups for Chunks
    # Get Groups for Chunks  Route to get the groups that a chunk is in.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param get_groups_for_chunks_data [GetGroupsForChunksData] JSON request payload to get the groups that a chunk is in
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BookmarkGroupResult>, Integer, Hash)>] Array<BookmarkGroupResult> data, response status code and response headers
    def get_groups_chunk_is_in_with_http_info(tr_dataset, get_groups_for_chunks_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.get_groups_chunk_is_in ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.get_groups_chunk_is_in"
      end
      # verify the required parameter 'get_groups_for_chunks_data' is set
      if @api_client.config.client_side_validation && get_groups_for_chunks_data.nil?
        fail ArgumentError, "Missing the required parameter 'get_groups_for_chunks_data' when calling ChunkGroupApi.get_groups_chunk_is_in"
      end
      # resource path
      local_var_path = '/api/chunk_group/chunks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_groups_for_chunks_data)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BookmarkGroupResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.get_groups_chunk_is_in",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#get_groups_chunk_is_in\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recommended Groups
    # Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param reccomend_group_chunks_request [ReccomendGroupChunksRequest] JSON request payload to get recommendations of chunks similar to the chunks in the request
    # @param [Hash] opts the optional parameters
    # @return [Array<GroupScoreChunkDTO>]
    def get_recommended_groups(tr_dataset, reccomend_group_chunks_request, opts = {})
      data, _status_code, _headers = get_recommended_groups_with_http_info(tr_dataset, reccomend_group_chunks_request, opts)
      data
    end

    # Get Recommended Groups
    # Get Recommended Groups  Route to get recommended groups. This route will return groups which are similar to the groups in the request body.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param reccomend_group_chunks_request [ReccomendGroupChunksRequest] JSON request payload to get recommendations of chunks similar to the chunks in the request
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GroupScoreChunkDTO>, Integer, Hash)>] Array<GroupScoreChunkDTO> data, response status code and response headers
    def get_recommended_groups_with_http_info(tr_dataset, reccomend_group_chunks_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.get_recommended_groups ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.get_recommended_groups"
      end
      # verify the required parameter 'reccomend_group_chunks_request' is set
      if @api_client.config.client_side_validation && reccomend_group_chunks_request.nil?
        fail ArgumentError, "Missing the required parameter 'reccomend_group_chunks_request' when calling ChunkGroupApi.get_recommended_groups"
      end
      # resource path
      local_var_path = '/api/chunk_group/recommend'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reccomend_group_chunks_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GroupScoreChunkDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.get_recommended_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#get_recommended_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Groups for Dataset
    # Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param dataset_id [String] The id of the dataset to fetch groups for.
    # @param page [Integer] The page of groups to fetch. Each page contains 10 groups. Support for custom page size is coming soon.
    # @param [Hash] opts the optional parameters
    # @return [GroupData]
    def get_specific_dataset_chunk_groups(tr_dataset, dataset_id, page, opts = {})
      data, _status_code, _headers = get_specific_dataset_chunk_groups_with_http_info(tr_dataset, dataset_id, page, opts)
      data
    end

    # Get Groups for Dataset
    # Get Groups for Dataset  Fetch the groups which belong to a dataset specified by its id.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param dataset_id [String] The id of the dataset to fetch groups for.
    # @param page [Integer] The page of groups to fetch. Each page contains 10 groups. Support for custom page size is coming soon.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupData, Integer, Hash)>] GroupData data, response status code and response headers
    def get_specific_dataset_chunk_groups_with_http_info(tr_dataset, dataset_id, page, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.get_specific_dataset_chunk_groups ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.get_specific_dataset_chunk_groups"
      end
      # verify the required parameter 'dataset_id' is set
      if @api_client.config.client_side_validation && dataset_id.nil?
        fail ArgumentError, "Missing the required parameter 'dataset_id' when calling ChunkGroupApi.get_specific_dataset_chunk_groups"
      end
      # verify the required parameter 'page' is set
      if @api_client.config.client_side_validation && page.nil?
        fail ArgumentError, "Missing the required parameter 'page' when calling ChunkGroupApi.get_specific_dataset_chunk_groups"
      end
      # resource path
      local_var_path = '/api/dataset/groups/{dataset_id}/{page}'.sub('{' + 'dataset_id' + '}', CGI.escape(dataset_id.to_s)).sub('{' + 'page' + '}', CGI.escape(page.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.get_specific_dataset_chunk_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#get_specific_dataset_chunk_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Chunk from Group
    # Remove Chunk from Group  Route to remove a chunk from a group.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param group_id [String] Id of the group to remove the bookmark&#39;ed chunk from
    # @param create_chunk_group_data [CreateChunkGroupData] JSON request payload to cretea a chunkGroup
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_chunk_from_group(tr_dataset, group_id, create_chunk_group_data, opts = {})
      remove_chunk_from_group_with_http_info(tr_dataset, group_id, create_chunk_group_data, opts)
      nil
    end

    # Remove Chunk from Group
    # Remove Chunk from Group  Route to remove a chunk from a group.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param group_id [String] Id of the group to remove the bookmark&#39;ed chunk from
    # @param create_chunk_group_data [CreateChunkGroupData] JSON request payload to cretea a chunkGroup
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_chunk_from_group_with_http_info(tr_dataset, group_id, create_chunk_group_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.remove_chunk_from_group ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.remove_chunk_from_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ChunkGroupApi.remove_chunk_from_group"
      end
      # verify the required parameter 'create_chunk_group_data' is set
      if @api_client.config.client_side_validation && create_chunk_group_data.nil?
        fail ArgumentError, "Missing the required parameter 'create_chunk_group_data' when calling ChunkGroupApi.remove_chunk_from_group"
      end
      # resource path
      local_var_path = '/api/chunk_group/chunk/{group_id}'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_chunk_group_data)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.remove_chunk_from_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#remove_chunk_from_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Over Groups
    # Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
    # @param search_over_groups_data [SearchOverGroupsData] JSON request payload to semantically search over groups
    # @param [Hash] opts the optional parameters
    # @return [SearchOverGroupsResponseBody]
    def search_over_groups(search_over_groups_data, opts = {})
      data, _status_code, _headers = search_over_groups_with_http_info(search_over_groups_data, opts)
      data
    end

    # Search Over Groups
    # Search Over Groups  This route allows you to get groups as results instead of chunks. Each group returned will have the matching chunks sorted by similarity within the group. This is useful for when you want to get groups of chunks which are similar to the search query. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large. Compatible with semantic, fulltext, or hybrid search modes.
    # @param search_over_groups_data [SearchOverGroupsData] JSON request payload to semantically search over groups
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchOverGroupsResponseBody, Integer, Hash)>] SearchOverGroupsResponseBody data, response status code and response headers
    def search_over_groups_with_http_info(search_over_groups_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.search_over_groups ...'
      end
      # verify the required parameter 'search_over_groups_data' is set
      if @api_client.config.client_side_validation && search_over_groups_data.nil?
        fail ArgumentError, "Missing the required parameter 'search_over_groups_data' when calling ChunkGroupApi.search_over_groups"
      end
      # resource path
      local_var_path = '/api/chunk_group/group_oriented_search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(search_over_groups_data)

      # return_type
      return_type = opts[:debug_return_type] || 'SearchOverGroupsResponseBody'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.search_over_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#search_over_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Within Group
    # Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param search_within_group_data [SearchWithinGroupData] JSON request payload to semantically search a group
    # @param [Hash] opts the optional parameters
    # @return [SearchGroupsResult]
    def search_within_group(tr_dataset, search_within_group_data, opts = {})
      data, _status_code, _headers = search_within_group_with_http_info(tr_dataset, search_within_group_data, opts)
      data
    end

    # Search Within Group
    # Search Within Group  This route allows you to search only within a group. This is useful for when you only want search results to contain chunks which are members of a specific group. If choosing hybrid search, the results will be re-ranked using BAAI/bge-reranker-large.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param search_within_group_data [SearchWithinGroupData] JSON request payload to semantically search a group
    # @param [Hash] opts the optional parameters
    # @return [Array<(SearchGroupsResult, Integer, Hash)>] SearchGroupsResult data, response status code and response headers
    def search_within_group_with_http_info(tr_dataset, search_within_group_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.search_within_group ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.search_within_group"
      end
      # verify the required parameter 'search_within_group_data' is set
      if @api_client.config.client_side_validation && search_within_group_data.nil?
        fail ArgumentError, "Missing the required parameter 'search_within_group_data' when calling ChunkGroupApi.search_within_group"
      end
      # resource path
      local_var_path = '/api/chunk_group/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(search_within_group_data)

      # return_type
      return_type = opts[:debug_return_type] || 'SearchGroupsResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.search_within_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#search_within_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Group
    # Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param update_chunk_group_data [UpdateChunkGroupData] JSON request payload to update a chunkGroup
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_chunk_group(tr_dataset, update_chunk_group_data, opts = {})
      update_chunk_group_with_http_info(tr_dataset, update_chunk_group_data, opts)
      nil
    end

    # Update Group
    # Update Group  Update a chunk_group. If you try to change the tracking_id to one that already exists, this operation will fail.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param update_chunk_group_data [UpdateChunkGroupData] JSON request payload to update a chunkGroup
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_chunk_group_with_http_info(tr_dataset, update_chunk_group_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.update_chunk_group ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.update_chunk_group"
      end
      # verify the required parameter 'update_chunk_group_data' is set
      if @api_client.config.client_side_validation && update_chunk_group_data.nil?
        fail ArgumentError, "Missing the required parameter 'update_chunk_group_data' when calling ChunkGroupApi.update_chunk_group"
      end
      # resource path
      local_var_path = '/api/chunk_group'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_chunk_group_data)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.update_chunk_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#update_chunk_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Group by Tracking ID
    # Update Group by Tracking ID  Update a chunk_group with the given tracking id.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param tracking_id [String] Tracking id of the chunk_group to update
    # @param update_group_by_tracking_id_data [UpdateGroupByTrackingIDData] JSON request payload to update a chunkGroup
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_group_by_tracking_id(tr_dataset, tracking_id, update_group_by_tracking_id_data, opts = {})
      update_group_by_tracking_id_with_http_info(tr_dataset, tracking_id, update_group_by_tracking_id_data, opts)
      nil
    end

    # Update Group by Tracking ID
    # Update Group by Tracking ID  Update a chunk_group with the given tracking id.
    # @param tr_dataset [String] The dataset id to use for the request
    # @param tracking_id [String] Tracking id of the chunk_group to update
    # @param update_group_by_tracking_id_data [UpdateGroupByTrackingIDData] JSON request payload to update a chunkGroup
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_group_by_tracking_id_with_http_info(tr_dataset, tracking_id, update_group_by_tracking_id_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChunkGroupApi.update_group_by_tracking_id ...'
      end
      # verify the required parameter 'tr_dataset' is set
      if @api_client.config.client_side_validation && tr_dataset.nil?
        fail ArgumentError, "Missing the required parameter 'tr_dataset' when calling ChunkGroupApi.update_group_by_tracking_id"
      end
      # verify the required parameter 'tracking_id' is set
      if @api_client.config.client_side_validation && tracking_id.nil?
        fail ArgumentError, "Missing the required parameter 'tracking_id' when calling ChunkGroupApi.update_group_by_tracking_id"
      end
      # verify the required parameter 'update_group_by_tracking_id_data' is set
      if @api_client.config.client_side_validation && update_group_by_tracking_id_data.nil?
        fail ArgumentError, "Missing the required parameter 'update_group_by_tracking_id_data' when calling ChunkGroupApi.update_group_by_tracking_id"
      end
      # resource path
      local_var_path = '/api/chunk_group/tracking_id/{tracking_id}'.sub('{' + 'tracking_id' + '}', CGI.escape(tracking_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'TR-Dataset'] = tr_dataset

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_group_by_tracking_id_data)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKey']

      new_options = opts.merge(
        :operation => :"ChunkGroupApi.update_group_by_tracking_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChunkGroupApi#update_group_by_tracking_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
