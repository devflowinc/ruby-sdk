=begin
#Trieve API

#Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.

The version of the OpenAPI document: 0.11.0
Contact: developers@trieve.ai
Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'date'
require 'time'

module TrieveRubyClient
  class GroupScoreChunk
    attr_accessor :file_id

    attr_accessor :group_created_at

    attr_accessor :group_dataset_id

    attr_accessor :group_description

    attr_accessor :group_id

    attr_accessor :group_metadata

    attr_accessor :group_name

    attr_accessor :group_tag_set

    attr_accessor :group_tracking_id

    attr_accessor :group_updated_at

    attr_accessor :metadata

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'file_id' => :'file_id',
        :'group_created_at' => :'group_created_at',
        :'group_dataset_id' => :'group_dataset_id',
        :'group_description' => :'group_description',
        :'group_id' => :'group_id',
        :'group_metadata' => :'group_metadata',
        :'group_name' => :'group_name',
        :'group_tag_set' => :'group_tag_set',
        :'group_tracking_id' => :'group_tracking_id',
        :'group_updated_at' => :'group_updated_at',
        :'metadata' => :'metadata'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'file_id' => :'String',
        :'group_created_at' => :'Time',
        :'group_dataset_id' => :'String',
        :'group_description' => :'String',
        :'group_id' => :'String',
        :'group_metadata' => :'Object',
        :'group_name' => :'String',
        :'group_tag_set' => :'Array<String>',
        :'group_tracking_id' => :'String',
        :'group_updated_at' => :'Time',
        :'metadata' => :'Array<ScoreChunkDTO>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'file_id',
        :'group_description',
        :'group_metadata',
        :'group_name',
        :'group_tag_set',
        :'group_tracking_id',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TrieveRubyClient::GroupScoreChunk` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TrieveRubyClient::GroupScoreChunk`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'file_id')
        self.file_id = attributes[:'file_id']
      end

      if attributes.key?(:'group_created_at')
        self.group_created_at = attributes[:'group_created_at']
      else
        self.group_created_at = nil
      end

      if attributes.key?(:'group_dataset_id')
        self.group_dataset_id = attributes[:'group_dataset_id']
      else
        self.group_dataset_id = nil
      end

      if attributes.key?(:'group_description')
        self.group_description = attributes[:'group_description']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      else
        self.group_id = nil
      end

      if attributes.key?(:'group_metadata')
        self.group_metadata = attributes[:'group_metadata']
      end

      if attributes.key?(:'group_name')
        self.group_name = attributes[:'group_name']
      end

      if attributes.key?(:'group_tag_set')
        if (value = attributes[:'group_tag_set']).is_a?(Array)
          self.group_tag_set = value
        end
      end

      if attributes.key?(:'group_tracking_id')
        self.group_tracking_id = attributes[:'group_tracking_id']
      end

      if attributes.key?(:'group_updated_at')
        self.group_updated_at = attributes[:'group_updated_at']
      else
        self.group_updated_at = nil
      end

      if attributes.key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Array)
          self.metadata = value
        end
      else
        self.metadata = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @group_created_at.nil?
        invalid_properties.push('invalid value for "group_created_at", group_created_at cannot be nil.')
      end

      if @group_dataset_id.nil?
        invalid_properties.push('invalid value for "group_dataset_id", group_dataset_id cannot be nil.')
      end

      if @group_id.nil?
        invalid_properties.push('invalid value for "group_id", group_id cannot be nil.')
      end

      if @group_updated_at.nil?
        invalid_properties.push('invalid value for "group_updated_at", group_updated_at cannot be nil.')
      end

      if @metadata.nil?
        invalid_properties.push('invalid value for "metadata", metadata cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @group_created_at.nil?
      return false if @group_dataset_id.nil?
      return false if @group_id.nil?
      return false if @group_updated_at.nil?
      return false if @metadata.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          file_id == o.file_id &&
          group_created_at == o.group_created_at &&
          group_dataset_id == o.group_dataset_id &&
          group_description == o.group_description &&
          group_id == o.group_id &&
          group_metadata == o.group_metadata &&
          group_name == o.group_name &&
          group_tag_set == o.group_tag_set &&
          group_tracking_id == o.group_tracking_id &&
          group_updated_at == o.group_updated_at &&
          metadata == o.metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [file_id, group_created_at, group_dataset_id, group_description, group_id, group_metadata, group_name, group_tag_set, group_tracking_id, group_updated_at, metadata].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TrieveRubyClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
