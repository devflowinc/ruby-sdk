=begin
#Trieve API

#Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.

The version of the OpenAPI document: 0.6.0
Contact: developers@trieve.ai
Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'date'
require 'time'

module TrieveRubyClient
  class ClientDatasetConfiguration
    attr_accessor :create_chunk_feature

    attr_accessor :date_range_value

    attr_accessor :document_upload_feature

    attr_accessor :file_name_key

    attr_accessor :filter_items

    attr_accessor :frontmatter_vals

    attr_accessor :image_range_end_key

    attr_accessor :image_range_start_key

    attr_accessor :lines_before_show_more

    attr_accessor :search_queries

    attr_accessor :suggested_queries

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'create_chunk_feature' => :'CREATE_CHUNK_FEATURE',
        :'date_range_value' => :'DATE_RANGE_VALUE',
        :'document_upload_feature' => :'DOCUMENT_UPLOAD_FEATURE',
        :'file_name_key' => :'FILE_NAME_KEY',
        :'filter_items' => :'FILTER_ITEMS',
        :'frontmatter_vals' => :'FRONTMATTER_VALS',
        :'image_range_end_key' => :'IMAGE_RANGE_END_KEY',
        :'image_range_start_key' => :'IMAGE_RANGE_START_KEY',
        :'lines_before_show_more' => :'LINES_BEFORE_SHOW_MORE',
        :'search_queries' => :'SEARCH_QUERIES',
        :'suggested_queries' => :'SUGGESTED_QUERIES'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'create_chunk_feature' => :'Boolean',
        :'date_range_value' => :'String',
        :'document_upload_feature' => :'Boolean',
        :'file_name_key' => :'String',
        :'filter_items' => :'Object',
        :'frontmatter_vals' => :'String',
        :'image_range_end_key' => :'String',
        :'image_range_start_key' => :'String',
        :'lines_before_show_more' => :'Integer',
        :'search_queries' => :'String',
        :'suggested_queries' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'create_chunk_feature',
        :'date_range_value',
        :'document_upload_feature',
        :'filter_items',
        :'frontmatter_vals',
        :'image_range_end_key',
        :'image_range_start_key',
        :'lines_before_show_more',
        :'search_queries',
        :'suggested_queries'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TrieveRubyClient::ClientDatasetConfiguration` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TrieveRubyClient::ClientDatasetConfiguration`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'create_chunk_feature')
        self.create_chunk_feature = attributes[:'create_chunk_feature']
      end

      if attributes.key?(:'date_range_value')
        self.date_range_value = attributes[:'date_range_value']
      end

      if attributes.key?(:'document_upload_feature')
        self.document_upload_feature = attributes[:'document_upload_feature']
      end

      if attributes.key?(:'file_name_key')
        self.file_name_key = attributes[:'file_name_key']
      else
        self.file_name_key = nil
      end

      if attributes.key?(:'filter_items')
        self.filter_items = attributes[:'filter_items']
      end

      if attributes.key?(:'frontmatter_vals')
        self.frontmatter_vals = attributes[:'frontmatter_vals']
      end

      if attributes.key?(:'image_range_end_key')
        self.image_range_end_key = attributes[:'image_range_end_key']
      end

      if attributes.key?(:'image_range_start_key')
        self.image_range_start_key = attributes[:'image_range_start_key']
      end

      if attributes.key?(:'lines_before_show_more')
        self.lines_before_show_more = attributes[:'lines_before_show_more']
      end

      if attributes.key?(:'search_queries')
        self.search_queries = attributes[:'search_queries']
      end

      if attributes.key?(:'suggested_queries')
        self.suggested_queries = attributes[:'suggested_queries']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @file_name_key.nil?
        invalid_properties.push('invalid value for "file_name_key", file_name_key cannot be nil.')
      end

      if !@lines_before_show_more.nil? && @lines_before_show_more < 0
        invalid_properties.push('invalid value for "lines_before_show_more", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @file_name_key.nil?
      return false if !@lines_before_show_more.nil? && @lines_before_show_more < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] lines_before_show_more Value to be assigned
    def lines_before_show_more=(lines_before_show_more)
      if !lines_before_show_more.nil? && lines_before_show_more < 0
        fail ArgumentError, 'invalid value for "lines_before_show_more", must be greater than or equal to 0.'
      end

      @lines_before_show_more = lines_before_show_more
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          create_chunk_feature == o.create_chunk_feature &&
          date_range_value == o.date_range_value &&
          document_upload_feature == o.document_upload_feature &&
          file_name_key == o.file_name_key &&
          filter_items == o.filter_items &&
          frontmatter_vals == o.frontmatter_vals &&
          image_range_end_key == o.image_range_end_key &&
          image_range_start_key == o.image_range_start_key &&
          lines_before_show_more == o.lines_before_show_more &&
          search_queries == o.search_queries &&
          suggested_queries == o.suggested_queries
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [create_chunk_feature, date_range_value, document_upload_feature, file_name_key, filter_items, frontmatter_vals, image_range_end_key, image_range_start_key, lines_before_show_more, search_queries, suggested_queries].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TrieveRubyClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
