=begin
#Trieve API

#Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.

The version of the OpenAPI document: 0.11.0
Contact: developers@trieve.ai
Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'date'
require 'time'

module TrieveRubyClient
  class SearchOverGroupsData
    attr_accessor :filters

    # Get total page count for the query accounting for the applied filters. Defaults to false, but can be set to true when the latency penalty is acceptable (typically 50-200ms).
    attr_accessor :get_total_pages

    # Group_size is the number of chunks to fetch for each group. The default is 3. If a group has less than group_size chunks, all chunks will be returned. If this is set to a large number, we recommend setting slim_chunks to true to avoid returning the content and chunk_html of the chunks so as to lower the amount of time required for content download and serialization.
    attr_accessor :group_size

    # Set highlight_delimiters to a list of strings to use as delimiters for highlighting. If not specified, this defaults to [\"?\", \",\", \".\", \"!\"]. These are the characters that will be used to split the chunk_html into splits for highlighting.
    attr_accessor :highlight_delimiters

    # Set highlight_max_length to control the maximum number of tokens (typically whitespace separated strings, but sometimes also word stems) which can be present within a single highlight. If not specified, this defaults to 8. This is useful to shorten large splits which may have low scores due to length compared to the query. Set to something very large like 100 to highlight entire splits.
    attr_accessor :highlight_max_length

    # Set highlight_max_num to control the maximum number of highlights per chunk. If not specified, this defaults to 3. It may be less than 3 if no snippets score above the highlight_threshold.
    attr_accessor :highlight_max_num

    # Set highlight_results to false for a slight latency improvement (1-10ms). If not specified, this defaults to true. This will add `<b><mark>` tags to the chunk_html of the chunks to highlight matching splits and return the highlights on each scored chunk in the response.
    attr_accessor :highlight_results

    # Set highlight_threshold to a lower or higher value to adjust the sensitivity of the highlights applied to the chunk html. If not specified, this defaults to 0.8. The range is 0.0 to 1.0.
    attr_accessor :highlight_threshold

    # Set highlight_window to a number to control the amount of words that are returned around the matched phrases. If not specified, this defaults to 0. This is useful for when you want to show more context around the matched words. When specified, window/2 whitespace separated words are added before and after each highlight in the response's highlights array. If an extended highlight overlaps with another highlight, the overlapping words are only included once.
    attr_accessor :highlight_window

    # Page of group results to fetch. Page is 1-indexed.
    attr_accessor :page

    # Page size is the number of group results to fetch. The default is 10.
    attr_accessor :page_size

    # Query is the search query. This can be any string. The query will be used to create an embedding vector and/or SPLADE vector which will be used to find the result set.
    attr_accessor :query

    # Set score_threshold to a float to filter out chunks with a score below the threshold. This threshold applies before weight and bias modifications. If not specified, this defaults to 0.0.
    attr_accessor :score_threshold

    attr_accessor :search_type

    # Set slim_chunks to true to avoid returning the content and chunk_html of the chunks. This is useful for when you want to reduce amount of data over the wire for latency improvement (typicall 10-50ms). Default is false.
    attr_accessor :slim_chunks

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'filters' => :'filters',
        :'get_total_pages' => :'get_total_pages',
        :'group_size' => :'group_size',
        :'highlight_delimiters' => :'highlight_delimiters',
        :'highlight_max_length' => :'highlight_max_length',
        :'highlight_max_num' => :'highlight_max_num',
        :'highlight_results' => :'highlight_results',
        :'highlight_threshold' => :'highlight_threshold',
        :'highlight_window' => :'highlight_window',
        :'page' => :'page',
        :'page_size' => :'page_size',
        :'query' => :'query',
        :'score_threshold' => :'score_threshold',
        :'search_type' => :'search_type',
        :'slim_chunks' => :'slim_chunks'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'filters' => :'ChunkFilter',
        :'get_total_pages' => :'Boolean',
        :'group_size' => :'Integer',
        :'highlight_delimiters' => :'Array<String>',
        :'highlight_max_length' => :'Integer',
        :'highlight_max_num' => :'Integer',
        :'highlight_results' => :'Boolean',
        :'highlight_threshold' => :'Float',
        :'highlight_window' => :'Integer',
        :'page' => :'Integer',
        :'page_size' => :'Integer',
        :'query' => :'String',
        :'score_threshold' => :'Float',
        :'search_type' => :'SearchMethod',
        :'slim_chunks' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'filters',
        :'get_total_pages',
        :'group_size',
        :'highlight_delimiters',
        :'highlight_max_length',
        :'highlight_max_num',
        :'highlight_results',
        :'highlight_threshold',
        :'highlight_window',
        :'page',
        :'page_size',
        :'score_threshold',
        :'slim_chunks'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TrieveRubyClient::SearchOverGroupsData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TrieveRubyClient::SearchOverGroupsData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'filters')
        self.filters = attributes[:'filters']
      end

      if attributes.key?(:'get_total_pages')
        self.get_total_pages = attributes[:'get_total_pages']
      end

      if attributes.key?(:'group_size')
        self.group_size = attributes[:'group_size']
      end

      if attributes.key?(:'highlight_delimiters')
        if (value = attributes[:'highlight_delimiters']).is_a?(Array)
          self.highlight_delimiters = value
        end
      end

      if attributes.key?(:'highlight_max_length')
        self.highlight_max_length = attributes[:'highlight_max_length']
      end

      if attributes.key?(:'highlight_max_num')
        self.highlight_max_num = attributes[:'highlight_max_num']
      end

      if attributes.key?(:'highlight_results')
        self.highlight_results = attributes[:'highlight_results']
      end

      if attributes.key?(:'highlight_threshold')
        self.highlight_threshold = attributes[:'highlight_threshold']
      end

      if attributes.key?(:'highlight_window')
        self.highlight_window = attributes[:'highlight_window']
      end

      if attributes.key?(:'page')
        self.page = attributes[:'page']
      end

      if attributes.key?(:'page_size')
        self.page_size = attributes[:'page_size']
      end

      if attributes.key?(:'query')
        self.query = attributes[:'query']
      else
        self.query = nil
      end

      if attributes.key?(:'score_threshold')
        self.score_threshold = attributes[:'score_threshold']
      end

      if attributes.key?(:'search_type')
        self.search_type = attributes[:'search_type']
      else
        self.search_type = nil
      end

      if attributes.key?(:'slim_chunks')
        self.slim_chunks = attributes[:'slim_chunks']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@group_size.nil? && @group_size < 0
        invalid_properties.push('invalid value for "group_size", must be greater than or equal to 0.')
      end

      if !@highlight_max_length.nil? && @highlight_max_length < 0
        invalid_properties.push('invalid value for "highlight_max_length", must be greater than or equal to 0.')
      end

      if !@highlight_max_num.nil? && @highlight_max_num < 0
        invalid_properties.push('invalid value for "highlight_max_num", must be greater than or equal to 0.')
      end

      if !@highlight_window.nil? && @highlight_window < 0
        invalid_properties.push('invalid value for "highlight_window", must be greater than or equal to 0.')
      end

      if !@page.nil? && @page < 0
        invalid_properties.push('invalid value for "page", must be greater than or equal to 0.')
      end

      if !@page_size.nil? && @page_size < 0
        invalid_properties.push('invalid value for "page_size", must be greater than or equal to 0.')
      end

      if @query.nil?
        invalid_properties.push('invalid value for "query", query cannot be nil.')
      end

      if @search_type.nil?
        invalid_properties.push('invalid value for "search_type", search_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@group_size.nil? && @group_size < 0
      return false if !@highlight_max_length.nil? && @highlight_max_length < 0
      return false if !@highlight_max_num.nil? && @highlight_max_num < 0
      return false if !@highlight_window.nil? && @highlight_window < 0
      return false if !@page.nil? && @page < 0
      return false if !@page_size.nil? && @page_size < 0
      return false if @query.nil?
      return false if @search_type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] group_size Value to be assigned
    def group_size=(group_size)
      if !group_size.nil? && group_size < 0
        fail ArgumentError, 'invalid value for "group_size", must be greater than or equal to 0.'
      end

      @group_size = group_size
    end

    # Custom attribute writer method with validation
    # @param [Object] highlight_max_length Value to be assigned
    def highlight_max_length=(highlight_max_length)
      if !highlight_max_length.nil? && highlight_max_length < 0
        fail ArgumentError, 'invalid value for "highlight_max_length", must be greater than or equal to 0.'
      end

      @highlight_max_length = highlight_max_length
    end

    # Custom attribute writer method with validation
    # @param [Object] highlight_max_num Value to be assigned
    def highlight_max_num=(highlight_max_num)
      if !highlight_max_num.nil? && highlight_max_num < 0
        fail ArgumentError, 'invalid value for "highlight_max_num", must be greater than or equal to 0.'
      end

      @highlight_max_num = highlight_max_num
    end

    # Custom attribute writer method with validation
    # @param [Object] highlight_window Value to be assigned
    def highlight_window=(highlight_window)
      if !highlight_window.nil? && highlight_window < 0
        fail ArgumentError, 'invalid value for "highlight_window", must be greater than or equal to 0.'
      end

      @highlight_window = highlight_window
    end

    # Custom attribute writer method with validation
    # @param [Object] page Value to be assigned
    def page=(page)
      if !page.nil? && page < 0
        fail ArgumentError, 'invalid value for "page", must be greater than or equal to 0.'
      end

      @page = page
    end

    # Custom attribute writer method with validation
    # @param [Object] page_size Value to be assigned
    def page_size=(page_size)
      if !page_size.nil? && page_size < 0
        fail ArgumentError, 'invalid value for "page_size", must be greater than or equal to 0.'
      end

      @page_size = page_size
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          filters == o.filters &&
          get_total_pages == o.get_total_pages &&
          group_size == o.group_size &&
          highlight_delimiters == o.highlight_delimiters &&
          highlight_max_length == o.highlight_max_length &&
          highlight_max_num == o.highlight_max_num &&
          highlight_results == o.highlight_results &&
          highlight_threshold == o.highlight_threshold &&
          highlight_window == o.highlight_window &&
          page == o.page &&
          page_size == o.page_size &&
          query == o.query &&
          score_threshold == o.score_threshold &&
          search_type == o.search_type &&
          slim_chunks == o.slim_chunks
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [filters, get_total_pages, group_size, highlight_delimiters, highlight_max_length, highlight_max_num, highlight_results, highlight_threshold, highlight_window, page, page_size, query, score_threshold, search_type, slim_chunks].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TrieveRubyClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
